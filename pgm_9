#include<stdio.h> 
#include<math.h>
#include<stdlib.h>
typedef struct node
{
int cf;
int xex, yex, zex; 
struct node *link;
} NODE;
NODE *p3 = NULL, *p3head = NULL;
NODE* insert(NODE *head, int n)
{
int i;
NODE *nn, *last = NULL;
for (i = 0; i < n; i++) {
nn = (NODE*)malloc(sizeof(NODE));
printf("Enter the coefficient: ");
scanf("%d", &nn->cf);
printf("Enter the exponents for x, y, z: ");
scanf("%d %d %d", &nn->xex, &nn->yex, &nn->zex);
if (head == NULL) {
head = nn;
nn->link = head;
} else {
last->link = nn;
nn->link = head;
}
last = nn;
}
return head;
}
void display(NODE* last)
{
if (last == NULL) {
printf("List is empty.\n");
return;
}
NODE *temp = last->link;
do {
printf("(%dx^%dy^%dz^%d)", temp->cf, temp->xex, temp->yex, temp->zex);
temp = temp->link;
if (temp != last->link)
printf(" + ");
} while (temp != last->link);
printf("\n");
}
void add(NODE *p1, NODE *p2)
{
NODE *nn, *a = p1->link, *b = p2->link;
p3head = nn = (NODE*)malloc(sizeof(NODE));
p3 = nn;
nn->link = p3head;
while (a != p1 && b != p2) {
if (a->xex == b->xex && a->yex == b->yex && a->zex == b->zex) {
nn = (NODE*)malloc(sizeof(NODE));
nn->cf = a->cf + b->cf;
nn->xex = a->xex;
nn->yex = a->yex;
nn->zex = a->zex;
p3->link = nn;
p3 = nn;
a = a->link;
b = b->link;
} else if (a->xex > b->xex || (a->xex == b->xex && a->yex > b->yex) || (a->xex == b->xex && a->yex == b->yex && a->zex > b->zex)) {
nn = (NODE*)malloc(sizeof(NODE));
nn->cf = a->cf;
nn->xex = a->xex;
nn->yex = a->yex;
nn->zex = a->zex;
p3->link = nn;
p3 = nn;
a = a->link;
} else {
nn = (NODE*)malloc(sizeof(NODE));
nn->cf = b->cf;
nn->xex = b->xex;
nn->yex = b->yex;
nn->zex = b->zex;
p3->link = nn;
p3 = nn;
b = b->link;
}
}
while (a != p1) {
nn = (NODE*)malloc(sizeof(NODE));
nn->cf = a->cf;
nn->xex = a->xex;
nn->yex = a->yex;
nn->zex = a->zex;
p3->link = nn;
p3 = nn;
a = a->link;
}    
while (b != p2) {
nn = (NODE*)malloc(sizeof(NODE));
nn->cf = b->cf;
nn->xex = b->xex;
nn->yex = b->yex;
nn->zex = b->zex;
p3->link = nn;
p3 = nn;
b = b->link;
}
p3->link = p3head;
}
void eval(NODE *p)
{
int x, y, z, res = 0, xval, yval, zval;
NODE *temp = p->link;
printf("Enter the values for x, y, z: ");
scanf("%d%d%d", &x, &y, &z);
do {
xval = pow(x, temp->xex);
yval = pow(y, temp->yex);
zval = pow(z, temp->zex);
res += temp->cf * xval * yval * zval;
temp = temp->link;
} while (temp != p->link);
printf("The result of the polynomial is: %d\n", res);
}
int main()
{
int n1, n2;
NODE *head1 = NULL, *head2 = NULL, *p1 = NULL, *p2 = NULL;
printf("Enter the number of terms in the first polynomial: ");
scanf("%d", &n1);
p1 = insert(head1, n1);
printf("Enter the number of terms in the second polynomial: ");
scanf("%d", &n2);
p2 = insert(head2, n2);
printf("\nEvaluating the first polynomial:\n");
eval(p1);
printf("\nEvaluating the second polynomial:\n");
eval(p2);
add(p1, p2);
printf("\nThe first polynomial is: ");
display(p1);
printf("\nThe second polynomial is: ");
display(p2);
printf("\nThe resultant polynomial is: ");
display(p3);
return 0;
}
